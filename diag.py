import streamlit as st
import openai  

# Configura√ß√£o do t√≠tulo da p√°gina
st.set_page_config(page_title="Assistente de Diagn√≥stico", page_icon="ü©∫")

st.title("üîç Assistente de Diagn√≥stico M√©dico")

# Link para gerar a chave API na OpenAI
st.markdown(
    "[üîë Clique aqui para obter sua chave API da OpenAI](https://platform.openai.com/signup)",
    unsafe_allow_html=True
)

# Criar um espa√ßo para a chave API
api_key = st.text_input("Digite sua chave da API OpenAI:", type="password")

# Fun√ß√£o para verificar os modelos dispon√≠veis
def verificar_modelo(api_key):
    try:
        client = openai.OpenAI(api_key=api_key)
        modelos_disponiveis = [model.id for model in client.models.list().data]
        if "gpt-4" in modelos_disponiveis:
            return "gpt-4"
        elif "gpt-3.5-turbo" in modelos_disponiveis:
            return "gpt-3.5-turbo"
        else:
            return None
    except Exception as e:
        return None

# Verifica se a chave foi inserida
if api_key:
    st.success("‚úÖ Chave API inserida com sucesso! Verificando modelos dispon√≠veis...")

    modelo_escolhido = verificar_modelo(api_key)

    if modelo_escolhido:
        st.success(f"üß† Modelo dispon√≠vel: {modelo_escolhido}")
    else:
        st.error("‚ùå Erro: sua chave n√£o tem acesso a modelos dispon√≠veis.")
        st.stop()

    with st.form("diagnostico_form"):
        st.subheader("üìã Dados do Paciente")

        idade = st.number_input("Idade do paciente:", min_value=0, max_value=120, step=1)
        genero = st.selectbox("G√™nero:", ["Masculino", "Feminino", "Outro"])
        comorbidades = st.text_input("Comorbidades (ou 'sem comorbidades conhecidas'):")

        st.subheader("ü©∫ Queixa Principal e Sintomas")
        queixa_principal = st.text_area("Queixa principal e dura√ß√£o:")
        
        sintomas = st.text_area("Liste os sintomas associados (separados por v√≠rgula):")

        sinais_vitais = st.text_area("Sinais vitais (se dispon√≠veis):")
        exame_fisico = st.text_area("Achados relevantes no exame f√≠sico:")
        exames = st.text_area("Exames laboratoriais ou de imagem (se dispon√≠veis):")

        enviar = st.form_submit_button("üîé Analisar")

    if enviar:
        prompt = f"""
        Analise a seguinte constela√ß√£o de sintomas para um poss√≠vel diagn√≥stico diferencial:

        Paciente: {idade} anos, {genero}, com {comorbidades}.

        Queixa principal: {queixa_principal}.

        Sintomas associados:
        - {sintomas.replace(',', '\n    - ')}

        Sinais vitais: {sinais_vitais}

        Achados relevantes no exame f√≠sico:
        - {exame_fisico}

        Exames laboratoriais ou de imagem (se dispon√≠veis):
        - {exames}

        Por favor:
        1. Liste os diagn√≥sticos diferenciais organizados por PROBABILIDADE, do mais prov√°vel ao menos prov√°vel, considerando os dados epidemiol√≥gicos e a apresenta√ß√£o cl√≠nica. Para cada diagn√≥stico, forne√ßa uma breve justificativa baseada nos sintomas e sinais apresentados.

        2. Em seguida, reorganize os mesmos diagn√≥sticos por GRAVIDADE, do mais grave (potencialmente fatal ou com necessidade de interven√ß√£o imediata) ao menos grave. Para cada diagn√≥stico, indique o tempo estimado para interven√ß√£o e poss√≠veis complica√ß√µes caso n√£o seja tratado adequadamente.

        3. Sugira os pr√≥ximos passos diagn√≥sticos mais apropriados para confirmar ou descartar cada uma das hip√≥teses principais.

        4. Indique se h√° sinais de alarme ou 'red flags' na apresenta√ß√£o que exigiriam aten√ß√£o imediata ou encaminhamento para emerg√™ncia.
        """

        try:
            with st.spinner("üß† Analisando..."):
                client = openai.OpenAI(api_key=api_key)  

                response = client.chat.completions.create(
                    model=modelo_escolhido,
                    messages=[{"role": "user", "content": prompt}]
                )

                resposta = response.choices[0].message.content
            
            st.subheader("üìÑ Resultado da An√°lise:")
            st.markdown(resposta)
        
        except Exception as e:
            st.error(f"‚ùå Erro ao acessar a API: {e}")

else:
    st.warning("‚ö†Ô∏è Digite sua chave da API para come√ßar.")
